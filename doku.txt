GUI:
  - Im Menü: Optionen Start, Options, Credits, Quit
  - Im Spiel: Minenfeld + unterer Bereich hat Buttons Restart und Quit (save Game?)



Game Algo:
  1. Generiere n*m großes Feld (entweder Fenstergröße oder Nachfragen)
  2. Zeichne das Feld
  3. Warte auf ClickEvent auf bestimmten Block b
  IF b.visible_flag = True
    -> Weiter warten
  IF b = # // Mine
    3a. zu 5.
  IF b = 0-8 // leeres Feld
    3b. gehe durch alle Blöcke und prüfe ob alle visible
      IF true -> zu 4.
    3c. setze visible Flag auf Block
    3d. zu 2.
  4. Gewinn-Mitteilung anzeigen + speichere Score
  5. GAME OVER -> zeige Scores und einige Optionen (Main Menu, Restart, etc.)


- 2d Array generieren (n*m)
  - Jede Zelle ist ein Tupel bestehend aus Inhalt der Zelle und visible Flag
    -> (Int, Bool)
  - Inhalt:
    -> 0 - Leer
    -> (-1) - Mine
    -> 1-8 - Leeres Feld mit Anzahl der Minen
  - Visible Flag:
    -> False - Feld wurde noch nicht angeklickt und Inhalt wird nicht angezeigt
    -> True - Feld wurde bereits angeklickt
    -> Visible Flags werden auch gesetzt, wenn sie leere Felder betreffen, die an ein angeklicktes Feld angrenzen (rekursiv)


- Generierungsregeln (vorläufig!!):
  1. min. (n+m - 10) Minen
  2. max. (n+m + 20) Minen
  3. Max. 5 Minen die aneinander angrenzen

- Generierung:
  1. Erstelle Array mit n*m Tupeln darin
  2. Gehe durch jedes Tupel:
    2a. Berechne Wahrscheinlichkeit für Mine (Formel muss abhängig sein von Feldgröße, (evtl. Schwierigkeitsgrad))
    2b. IF Random Num < Wahrscheinlichkeit: (#, True) | ELSE: (0, True)
  3. Prüfe ob Anzahl an Minen mit den Vorgaben übereinstimmt und wiederhole ggf.
  4. Gehe nochmal durch jedes Tupel und passe den Inhalt der Nicht-Minen an
    -> Tupel Index (i,j) -> Gehe durch (i-1 .. i+1, j-1 .. j+1) (8 Indizes) und berechne die Anzahl der Minen in den Feldern
    -> ersetze den Inhalt des akt. Tupel durch die Anzahl an Minen

- Probleme:
  -> Arrayzellen haben keine 2d Index ?
    -> Lösung A: Berechnung mit Index i = ( (div) i n), (mod n)) (i ist das ite Element des Arrays)
    -> Lösung B: speichern des Index in das Tupel in der Zelle => ((Num, Num), Num, Bool)
